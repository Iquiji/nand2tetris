<tokens>
<keyword> class </keyword>
<identifier> GameController </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> PRNG </identifier>
<identifier> rng </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Board </identifier>
<identifier> landed_board </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Piece </identifier>
<identifier> active_piece </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<identifier> Piece </identifier>
<identifier> next_piece </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> GameController </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> rng </identifier>
<symbol> = </symbol>
<identifier> PRNG </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> landed_board </identifier>
<symbol> = </symbol>
<identifier> Board </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> active_piece </identifier>
<symbol> = </symbol>
<identifier> genNewPiece </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next_piece </identifier>
<symbol> = </symbol>
<identifier> genNewPiece </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> run </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> dbg_msg </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> rng_msg </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> score_msg </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> String </identifier>
<identifier> speed_msg </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> char </keyword>
<identifier> key </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> mov_x </identifier>
<symbol> , </symbol>
<identifier> mov_y </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> collision </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> ground_collision </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> score </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp_for_score </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<integerConstant> 400 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> dbg_msg </identifier>
<symbol> = </symbol>
<stringConstant> Collisions: </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rng_msg </identifier>
<symbol> = </symbol>
<stringConstant> RNG: </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score_msg </identifier>
<symbol> = </symbol>
<stringConstant> Score: </stringConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed_msg </identifier>
<symbol> = </symbol>
<stringConstant> Speed: </stringConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mov_x </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> mov_y </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Sys </identifier>
<symbol> . </symbol>
<identifier> wait </identifier>
<symbol> ( </symbol>
<identifier> speed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> key </identifier>
<symbol> = </symbol>
<identifier> Keyboard </identifier>
<symbol> . </symbol>
<identifier> keyPressed </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 65 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> rotateLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> collisionCheck </identifier>
<symbol> ( </symbol>
<identifier> landed_board </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> collision </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> rotateRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 68 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> rotateRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> collisionCheck </identifier>
<symbol> ( </symbol>
<identifier> landed_board </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> collision </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> rotateLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 133 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> mov_y </identifier>
<symbol> = </symbol>
<identifier> mov_y </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 130 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> mov_x </identifier>
<symbol> = </symbol>
<identifier> mov_x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> key </identifier>
<symbol> = </symbol>
<integerConstant> 132 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> mov_x </identifier>
<symbol> = </symbol>
<identifier> mov_x </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> moveX </identifier>
<symbol> ( </symbol>
<identifier> mov_x </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> collisionCheck </identifier>
<symbol> ( </symbol>
<identifier> landed_board </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> moveX </identifier>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> mov_x </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> ground_collision </identifier>
<symbol> = </symbol>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> moveY </identifier>
<symbol> ( </symbol>
<identifier> mov_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<identifier> collision </identifier>
<symbol> + </symbol>
<identifier> ground_collision </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision </identifier>
<symbol> = </symbol>
<identifier> collision </identifier>
<symbol> + </symbol>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> collisionCheck </identifier>
<symbol> ( </symbol>
<identifier> landed_board </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> collision </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> collision </identifier>
<symbol> &gt; </symbol>
<identifier> ground_collision </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> moveY </identifier>
<symbol> ( </symbol>
<symbol> - </symbol>
<identifier> mov_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> integrate_piece_in_board </identifier>
<symbol> ( </symbol>
<identifier> landed_board </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> active_piece </identifier>
<symbol> = </symbol>
<identifier> next_piece </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> next_piece </identifier>
<symbol> = </symbol>
<identifier> genNewPiece </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> moveCursor </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> dbg_msg </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> collision </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> rng_msg </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> speed_msg </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> speed </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printString </identifier>
<symbol> ( </symbol>
<identifier> score_msg </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> printInt </identifier>
<symbol> ( </symbol>
<identifier> score </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<identifier> landed_board </identifier>
<symbol> . </symbol>
<identifier> checkLines </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 400 </integerConstant>
<symbol> / </symbol>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<identifier> temp_for_score </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<identifier> speed </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 1000 </integerConstant>
<symbol> / </symbol>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<identifier> temp_for_score </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<identifier> speed </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 3000 </integerConstant>
<symbol> / </symbol>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<identifier> temp_for_score </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<identifier> speed </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp_for_score </identifier>
<symbol> = </symbol>
<integerConstant> 12000 </integerConstant>
<symbol> / </symbol>
<identifier> speed </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> score </identifier>
<symbol> = </symbol>
<identifier> score </identifier>
<symbol> + </symbol>
<identifier> temp_for_score </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> speed </identifier>
<symbol> = </symbol>
<identifier> speed </identifier>
<symbol> - </symbol>
<symbol> ( </symbol>
<identifier> temp_for_score </identifier>
<symbol> / </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<identifier> Piece </identifier>
<identifier> genNewPiece </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> num </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<identifier> Piece </identifier>
<identifier> new </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> num </identifier>
<symbol> = </symbol>
<identifier> PRNG </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> , </symbol>
<integerConstant> 7 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> new </identifier>
<symbol> = </symbol>
<identifier> Piece </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> num </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> new </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> clearScreen </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> setColor </identifier>
<symbol> ( </symbol>
<keyword> true </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> landed_board </identifier>
<symbol> . </symbol>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> next_piece </identifier>
<symbol> . </symbol>
<identifier> flush_next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 188 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 188 </integerConstant>
<symbol> , </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 316 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 316 </integerConstant>
<symbol> , </symbol>
<integerConstant> 255 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 160 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<integerConstant> 460 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 400 </integerConstant>
<symbol> , </symbol>
<integerConstant> 160 </integerConstant>
<symbol> , </symbol>
<integerConstant> 460 </integerConstant>
<symbol> , </symbol>
<integerConstant> 160 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawLine </identifier>
<symbol> ( </symbol>
<integerConstant> 460 </integerConstant>
<symbol> , </symbol>
<integerConstant> 100 </integerConstant>
<symbol> , </symbol>
<integerConstant> 460 </integerConstant>
<symbol> , </symbol>
<integerConstant> 160 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> rng </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> landed_board </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> active_piece </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>