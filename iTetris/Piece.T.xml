<tokens>
<keyword> class </keyword>
<identifier> Piece </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Matrix2D </identifier>
<identifier> shape </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Piece </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> t </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 3 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 5 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> t </identifier>
<symbol> = </symbol>
<integerConstant> 6 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<integerConstant> 3 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<integerConstant> 2 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<integerConstant> 2 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 4 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> y </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getSizeX </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> size_x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getSizeY </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> getShape </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> shape </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> moveX </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> amount </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> amount </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> - </symbol>
<identifier> size_x </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> moveY </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> amount </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> amount </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> &gt; </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<integerConstant> 21 </integerConstant>
<symbol> - </symbol>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<integerConstant> 21 </integerConstant>
<symbol> - </symbol>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> rotateRight </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Matrix2D </identifier>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp_for_swap </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> board_val_temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> shape_val_temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> new_shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_y </identifier>
<symbol> , </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> new_shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> , </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> shape_val_temp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> temp_for_swap </identifier>
<symbol> = </symbol>
<identifier> size_x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<identifier> temp_for_swap </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> new_shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> board_val_temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> idx </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> new_shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> board_val_temp </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> , </symbol>
<identifier> shape_val_temp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> rotateLeft </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<identifier> Matrix2D </identifier>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp_for_swap </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> board_val_temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> shape_val_temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> new_shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_y </identifier>
<symbol> , </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> new_shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> , </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> shape_val_temp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> temp_for_swap </identifier>
<symbol> = </symbol>
<identifier> size_x </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_x </identifier>
<symbol> = </symbol>
<identifier> size_y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> size_y </identifier>
<symbol> = </symbol>
<identifier> temp_for_swap </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> new_shape </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<identifier> size_x </identifier>
<symbol> , </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> board_val_temp </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> size_y </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> - </symbol>
<identifier> idy </identifier>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> new_shape </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> board_val_temp </identifier>
<symbol> , </symbol>
<identifier> shape_val_temp </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> shape </identifier>
<symbol> = </symbol>
<identifier> new_shape </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> to_print </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> px_x </identifier>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> height_idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> to_print </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> to_print </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px_x </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> witdh_idx </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> px_y </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> px_x </identifier>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> , </symbol>
<identifier> px_x </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<identifier> height_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<identifier> witdh_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> flush_next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> to_print </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> px_x </identifier>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> height_idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> to_print </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> to_print </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> px_x </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 30 </integerConstant>
<symbol> + </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> witdh_idx </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> px_y </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> + </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> px_x </identifier>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> , </symbol>
<identifier> px_x </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> , </symbol>
<identifier> px_y </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<identifier> height_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> do </keyword>
<identifier> Output </identifier>
<symbol> . </symbol>
<identifier> println </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<identifier> witdh_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> collisionCheck </identifier>
<symbol> ( </symbol>
<identifier> Board </identifier>
<identifier> board </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> collision_count </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> board_val_temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> shape_val_temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision_count </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> board_val_temp </identifier>
<symbol> = </symbol>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> board_val_temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> collision_count </identifier>
<symbol> = </symbol>
<identifier> collision_count </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> collision_count </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> integrate_piece_in_board </identifier>
<symbol> ( </symbol>
<identifier> Board </identifier>
<identifier> board </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> collision_count </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> board_val_temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> shape_val_temp </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> collision_count </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> &lt; </symbol>
<identifier> size_x </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> idy </identifier>
<symbol> &lt; </symbol>
<identifier> size_y </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<identifier> shape </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> idy </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> shape_val_temp </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> board </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<identifier> idx </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<identifier> idy </identifier>
<symbol> , </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<identifier> idy </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> idy </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> idx </identifier>
<symbol> = </symbol>
<identifier> idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>