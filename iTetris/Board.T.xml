<tokens>
<keyword> class </keyword>
<identifier> Board </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<identifier> Matrix2D </identifier>
<identifier> landed </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> Board </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> landed </identifier>
<symbol> = </symbol>
<identifier> Matrix2D </identifier>
<symbol> . </symbol>
<identifier> new </identifier>
<symbol> ( </symbol>
<integerConstant> 10 </integerConstant>
<symbol> , </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> set </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> w </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> w </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> , </symbol>
<identifier> val </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> get </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> w </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> res </identifier>
<symbol> = </symbol>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> w </identifier>
<symbol> , </symbol>
<identifier> h </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> res </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> checkLines </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> cell_in_row </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> move_down_fut </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp_val </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 20 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> move_down_fut </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> height_idx </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> cell_in_row </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> move_down_fut </identifier>
<symbol> &gt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> temp_val </identifier>
<symbol> = </symbol>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> + </symbol>
<identifier> move_down_fut </identifier>
<symbol> , </symbol>
<identifier> temp_val </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> cell_in_row </identifier>
<symbol> = </symbol>
<identifier> cell_in_row </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<identifier> witdh_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> cell_in_row </identifier>
<symbol> = </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> move_down_fut </identifier>
<symbol> = </symbol>
<identifier> move_down_fut </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> set </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> , </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<identifier> witdh_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<identifier> height_idx </identifier>
<symbol> - </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<identifier> move_down_fut </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> flush </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> to_print </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 10 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> while </keyword>
<symbol> ( </symbol>
<identifier> height_idx </identifier>
<symbol> &lt; </symbol>
<integerConstant> 21 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> to_print </identifier>
<symbol> = </symbol>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> get </identifier>
<symbol> ( </symbol>
<identifier> witdh_idx </identifier>
<symbol> , </symbol>
<identifier> height_idx </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> to_print </identifier>
<symbol> = </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<symbol> ( </symbol>
<integerConstant> 16 </integerConstant>
<symbol> + </symbol>
<identifier> witdh_idx </identifier>
<symbol> ) </symbol>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<identifier> height_idx </identifier>
<symbol> * </symbol>
<integerConstant> 12 </integerConstant>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Screen </identifier>
<symbol> . </symbol>
<identifier> drawRectangle </identifier>
<symbol> ( </symbol>
<identifier> x </identifier>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> , </symbol>
<identifier> x </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> , </symbol>
<identifier> y </identifier>
<symbol> + </symbol>
<integerConstant> 11 </integerConstant>
<symbol> ) </symbol>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<identifier> height_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> height_idx </identifier>
<symbol> = </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> witdh_idx </identifier>
<symbol> = </symbol>
<identifier> witdh_idx </identifier>
<symbol> + </symbol>
<integerConstant> 1 </integerConstant>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> landed </identifier>
<symbol> . </symbol>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>