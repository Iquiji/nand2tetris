<tokens>
<keyword> class </keyword>
<identifier> PRNG </identifier>
<symbol> { </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> max15bit </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> ass </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> quotient </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> remainder </identifier>
<symbol> ; </symbol>
<keyword> field </keyword>
<keyword> int </keyword>
<identifier> state </identifier>
<symbol> ; </symbol>
<keyword> constructor </keyword>
<identifier> PRNG </identifier>
<identifier> new </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> max15bit </identifier>
<symbol> = </symbol>
<integerConstant> 16067 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> ass </identifier>
<symbol> = </symbol>
<integerConstant> 502 </integerConstant>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> quotient </identifier>
<symbol> = </symbol>
<identifier> max15bit </identifier>
<symbol> / </symbol>
<identifier> ass </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> remainder </identifier>
<symbol> = </symbol>
<identifier> PRNG </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> max15bit </identifier>
<symbol> , </symbol>
<identifier> ass </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> state </identifier>
<symbol> = </symbol>
<integerConstant> 2458 </integerConstant>
<symbol> ; </symbol>
<keyword> return </keyword>
<keyword> this </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> get </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> return </keyword>
<identifier> state </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> int </keyword>
<identifier> next </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> div </identifier>
<symbol> , </symbol>
<identifier> rem </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> s </identifier>
<symbol> , </symbol>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> result </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> div </identifier>
<symbol> = </symbol>
<identifier> state </identifier>
<symbol> / </symbol>
<identifier> quotient </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> rem </identifier>
<symbol> = </symbol>
<identifier> PRNG </identifier>
<symbol> . </symbol>
<identifier> mod </identifier>
<symbol> ( </symbol>
<identifier> state </identifier>
<symbol> , </symbol>
<identifier> quotient </identifier>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> s </identifier>
<symbol> = </symbol>
<identifier> rem </identifier>
<symbol> * </symbol>
<identifier> ass </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> t </identifier>
<symbol> = </symbol>
<identifier> div </identifier>
<symbol> * </symbol>
<identifier> remainder </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> result </identifier>
<symbol> = </symbol>
<identifier> s </identifier>
<symbol> - </symbol>
<identifier> t </identifier>
<symbol> ; </symbol>
<keyword> if </keyword>
<symbol> ( </symbol>
<identifier> result </identifier>
<symbol> &lt; </symbol>
<integerConstant> 0 </integerConstant>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> result </identifier>
<symbol> = </symbol>
<identifier> result </identifier>
<symbol> + </symbol>
<identifier> max15bit </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> let </keyword>
<identifier> state </identifier>
<symbol> = </symbol>
<identifier> result </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> state </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> function </keyword>
<keyword> int </keyword>
<identifier> mod </identifier>
<symbol> ( </symbol>
<keyword> int </keyword>
<identifier> a </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> b </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp2 </identifier>
<symbol> ; </symbol>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> temp3 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp3 </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> / </symbol>
<identifier> b </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp2 </identifier>
<symbol> = </symbol>
<identifier> b </identifier>
<symbol> * </symbol>
<identifier> temp3 </identifier>
<symbol> ; </symbol>
<keyword> let </keyword>
<identifier> temp </identifier>
<symbol> = </symbol>
<identifier> a </identifier>
<symbol> - </symbol>
<identifier> temp2 </identifier>
<symbol> ; </symbol>
<keyword> return </keyword>
<identifier> temp </identifier>
<symbol> ; </symbol>
<symbol> } </symbol>
<keyword> method </keyword>
<keyword> void </keyword>
<identifier> dispose </identifier>
<symbol> ( </symbol>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> do </keyword>
<identifier> Memory </identifier>
<symbol> . </symbol>
<identifier> deAlloc </identifier>
<symbol> ( </symbol>
<keyword> this </keyword>
<symbol> ) </symbol>
<symbol> ; </symbol>
<keyword> return </keyword>
<symbol> ; </symbol>
<symbol> } </symbol>
<symbol> } </symbol>
</tokens>