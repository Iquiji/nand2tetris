class Memory{
    static int ram;
    static Array free_mem_list;

    function void init(){
        let ram = 0;
        let free_mem_list = 2048;
        let free_mem_list[0] = 0; // next
        let free_mem_list[1] = 14334;
        return;
    }
    function int peek(int addr){
        return ram[addr];

    }
    function void poke(int addr,int val){
        let ram[addr] = val;

        return;
    }
    function Array alloc(int size){
        var int return_segment,current_segment,previuos_segment;
        var int new_next,block,size_offset;
        let previuos_segment = 0;
        let current_segment = free_mem_list;

        while (current_segment[1] < (size + 2)){
            let previuos_segment = current_segment;
            let current_segment = current_segment[0]; 
        }
        // now with enough space in current_segment
        let size_offset = size + 2;
        // get from the end ?!
        let block = current_segment + current_segment[1] - size_offset;
        let block[0] = -666;
        let block[1] = size;

        // reduce size of our current segment after allocating part of it
        let current_segment[1] = current_segment[1] - size_offset;

        
        // return block + 2
        let block = block + 2;

        return block;
    }
    function void deAlloc(Array to_dealloc){
        // append to beginning of linked list of free ram
        let to_dealloc[-2] = free_mem_list;
        let free_mem_list = to_dealloc - 2;

        return;
    }
}